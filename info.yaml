--- 
project:
  source_files:
    - toplevel_chip.v
    - chip.sv
    - decoder.v
    - mini_npu.sv
  top_module:  "toplevel_chip"

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it.
#
# Here is an example: https://github.com/mattvenn/tinytapeout_m_segments/blob/main/info.yaml
#
# This info will be automatically collected and used to make a datasheet for the chip.
documentation: 
  author:       "Christian Cherry"      
  discord:      "daylightcherry"      
  title:        "Mini NPU"      
  description:  "A mini neural processing unit for motion detection"
  how_it_works: "I2C master takes in data from a 3-axis accelerometer and passes
                 it on to a spiking neural network, which detects spikes in 
                 direction to infer motion"
  how_to_test:  "Post-silicon testing: Connect an ADXL345 accelerometer with I2C 
                 to the appropriate pins as outlined in chip.sv. Note that io_in 
                 and io_out should be tied together for correct bidirectional 
                 functionality. Press the start button to begin motion detection. 
                 Continuously move the connected accelerometer in a single direction 
                 for at least two seconds, and the connected LEDs will light up with 
                 binary values corresponding to the direction you swiped. Press 
                 the stop button to end motion detection.
                 
                 Testbench testing: If testing with the testbench accelerometer_tb.py, 
                 run 'make -Bf testbench.mk' on the design. Having python3 
                 and cocoTB installed is required. The testbench acts as the 
                 accelerometer device, and checks that the design performs all 
                 I2C data interactions correctly, as in accordance with the 
                 UM10204 I2C-Bus Specification and User Manual, and checks 
                 that the design correctly detects motions based on the data 
                 that was given.
                 
                 FPGA testing: If testing with an FPGA, run yosys on the design with 'read_verilog -sv mini_npu.sv', then 
                 'synth_ecp5 -json synth_out.json -top Mini_NPU'. Exit yosys, 
                 then run 'nextpnr-ecp5 --12k --json synth_out.json --lpf constraints.lpf --textcfg pnr_out.config' 
                 with the provided constrains.lpf file (edit this as needed). 
                 Then run 'ecppack --compress pnr_out.config bitstream.bit' 
                 and then 'fujprog bitstream.bit' to load bitstream onto the FPGA."
  external_hw:  "Pmod ADXL345 3-axis accelerometer: https://digilent.com/shop/pmod-acl-3-axis-accelerometer/"
  language:     "verilog, python(testbench)"
  doc_link:     "https://github.com/CCherry78/Mini-NPU/blob/main/README.md"
  clock_hz:     10000000       
  picture:      "https://github.com/CCherry78/Mini-NPU/tree/main/img"
  inputs:       
    - io_in[0] maps to SDA_in
    - io_in[1] maps to start
    - io_in[2] maps to stop
    - none
    - none
    - none
    - none
    - none
  outputs:
    - io_out[0] maps to SDA (output functionality)
    - io_out[1] maps to SCL
    - io_out[2:9] maps to LEDs
    - none
    - none
    - none
    - none
    - none

